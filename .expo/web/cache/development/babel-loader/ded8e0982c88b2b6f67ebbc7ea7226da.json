{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MusicPlayer\\\\screens\\\\AlbumDetailScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport { Avatar, Text, Icon, Divider, List, ListItem } from 'react-native-elements';\nimport * as actions from \"../actions\";\n\nvar AlbumDetailScreen = function (_React$Component) {\n  _inherits(AlbumDetailScreen, _React$Component);\n\n  var _super = _createSuper(AlbumDetailScreen);\n\n  function AlbumDetailScreen() {\n    var _this;\n\n    _classCallCheck(this, AlbumDetailScreen);\n\n    _this = _super.call(this);\n    _this.state = {\n      tracks: []\n    };\n    return _this;\n  }\n\n  _createClass(AlbumDetailScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var album = this.props.navigation.getParam('album', {});\n      actions.getAlbumTracks(album.id).then(function (tracks) {\n        return _this2.setState({\n          tracks: tracks\n        });\n      }).catch(function (error) {\n        return console.error(error);\n      });\n    }\n  }, {\n    key: \"saveFavoriteTrack\",\n    value: function saveFavoriteTrack(album, track) {\n      var favoriteAlbum, albumData, success;\n      return _regeneratorRuntime.async(function saveFavoriteTrack$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(actions.retrieveData('favoriteAlbum'));\n\n            case 2:\n              _context.t0 = _context.sent;\n\n              if (_context.t0) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t0 = {};\n\n            case 5:\n              favoriteAlbum = _context.t0;\n              albumData = favoriteAlbum[album.id];\n\n              if (!albumData) {\n                albumData = album;\n              }\n\n              if (!albumData['tracks']) {\n                albumData['tracks'] = {};\n              }\n\n              albumData['tracks'][track.id] = track;\n              favoriteAlbum[album.id] = albumData;\n              success = actions.storeData('favoriteAlbum', favoriteAlbum);\n\n              if (success) {\n                Alert.alert('Track Added!', \"Track \" + track.title + \" from \" + track.artist.name + \" was added to Favorites!\", [{\n                  text: 'Continue',\n                  onPress: function onPress() {\n                    return console.log('OK Pressed');\n                  }\n                }], {\n                  cancelable: false\n                });\n              }\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"renderTracks\",\n    value: function renderTracks(album) {\n      var _this3 = this;\n\n      var tracks = this.state.tracks;\n\n      if (tracks && tracks.length > 0) {\n        return tracks.map(function (track, index) {\n          return React.createElement(ListItem, {\n            key: index,\n            title: track.title,\n            leftIcon: React.createElement(Icon, {\n              raised: true,\n              name: \"play\",\n              type: \"font-awesome\",\n              color: \"#f50\",\n              onPress: function onPress() {\n                return Linking.openURL(track.preview);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 15\n              }\n            }),\n            rightIcon: React.createElement(Icon, {\n              raised: true,\n              name: \"heart\",\n              type: \"font-awesome\",\n              color: \"#f50\",\n              onPress: function onPress() {\n                return _this3.saveFavoriteTrack(album, track);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var album = this.props.navigation.getParam('album', {});\n      var artist = this.props.navigation.getParam('artist', '');\n\n      if (album.id) {\n        return React.createElement(ScrollView, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: styles.header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }\n        }, React.createElement(View, {\n          styles: styles.avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }\n        }, React.createElement(Avatar, {\n          size: \"xlarge\",\n          rounded: true,\n          source: {\n            uri: album.cover_medium\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }\n        })), React.createElement(View, {\n          style: styles.headerRight,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          h4: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }\n        }, \" \", album.title, \" \"), React.createElement(Text, {\n          h4: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }\n        }, \" \", artist, \" \"), React.createElement(Icon, {\n          raised: true,\n          name: \"play\",\n          type: \"font-awesome\",\n          color: \"#f50\",\n          size: 30,\n          onPress: function onPress() {\n            return Linking.openURL(_this4.state.tracks[0].preview);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }\n        }))), React.createElement(Divider, {\n          style: {\n            backgroundColor: 'black'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }\n        }), React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }\n        }, this.renderTracks(album)));\n      } else {\n        React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }\n        }, \"Loading...\"));\n      }\n    }\n  }]);\n\n  return AlbumDetailScreen;\n}(React.Component);\n\nAlbumDetailScreen.navigationOptions = {\n  title: 'AlbumDetail'\n};\nexport { AlbumDetailScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  header: {\n    flex: 1,\n    justifyContent: 'center',\n    flexDirection: 'row',\n    backgroundColor: '#91dfe5',\n    padding: 20\n  },\n  avatar: {\n    flex: 1,\n    marginRight: 10\n  },\n  headerRight: {\n    flex: 1,\n    flexWrap: 'wrap',\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  mainText: {\n    fontWeight: 'bold',\n    color: '#3a3a3a',\n    fontSize: 17\n  },\n  subText: {\n    color: '#3a3a3a',\n    fontSize: 17\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/MusicPlayer/screens/AlbumDetailScreen.js"],"names":["React","Avatar","Text","Icon","Divider","List","ListItem","actions","AlbumDetailScreen","state","tracks","album","props","navigation","getParam","getAlbumTracks","id","then","setState","catch","error","console","track","retrieveData","favoriteAlbum","albumData","success","storeData","Alert","alert","title","artist","name","text","onPress","log","cancelable","length","map","index","Linking","openURL","preview","saveFavoriteTrack","styles","container","header","avatar","uri","cover_medium","headerRight","backgroundColor","renderTracks","Component","navigationOptions","StyleSheet","create","flex","justifyContent","flexDirection","padding","marginRight","flexWrap","mainText","fontWeight","color","fontSize","subText"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAEA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2CC,QAA3C,QAA2D,uBAA3D;AAEA,OAAO,KAAKC,OAAZ;;IAEqBC,iB;;;;;AAKnB,+BACA;AAAA;;AAAA;;AACI;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAC;AADE,KAAb;AAHJ;AAUC;;;;WAED,6BACA;AAAA;;AACE,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B,EAAuC,EAAvC,CAAd;AACAP,MAAAA,OAAO,CAACQ,cAAR,CAAuBJ,KAAK,CAACK,EAA7B,EAAiCC,IAAjC,CACI,UAAAP,MAAM;AAAA,eAAI,MAAI,CAACQ,QAAL,CAAc;AAACR,UAAAA,MAAM,EAANA;AAAD,SAAd,CAAJ;AAAA,OADV,EAEES,KAFF,CAEQ,UAAAC,KAAK;AAAA,eAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAJ;AAAA,OAFb;AAIH;;;WACD,2BAAyBT,KAAzB,EAAgCW,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEgCf,OAAO,CAACgB,YAAR,CAAqB,eAArB,CAFhC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,4BAEyE,EAFzE;;AAAA;AAEUC,cAAAA,aAFV;AAIQC,cAAAA,SAJR,GAIoBD,aAAa,CAACb,KAAK,CAACK,EAAP,CAJjC;;AAMI,kBAAG,CAACS,SAAJ,EACA;AACIA,gBAAAA,SAAS,GAAGd,KAAZ;AACH;;AACD,kBAAG,CAACc,SAAS,CAAC,QAAD,CAAb,EACA;AACIA,gBAAAA,SAAS,CAAC,QAAD,CAAT,GAAsB,EAAtB;AACH;;AACGA,cAAAA,SAAS,CAAC,QAAD,CAAT,CAAoBH,KAAK,CAACN,EAA1B,IAAgCM,KAAhC;AACAE,cAAAA,aAAa,CAACb,KAAK,CAACK,EAAP,CAAb,GAA0BS,SAA1B;AAEMC,cAAAA,OAjBd,GAiBwBnB,OAAO,CAACoB,SAAR,CAAkB,eAAlB,EAAkCH,aAAlC,CAjBxB;;AAmBQ,kBAAGE,OAAH,EACA;AACIE,gBAAAA,KAAK,CAACC,KAAN,CACI,cADJ,aAEaP,KAAK,CAACQ,KAFnB,cAEiCR,KAAK,CAACS,MAAN,CAAaC,IAF9C,+BAGI,CACE;AAACC,kBAAAA,IAAI,EAAE,UAAP;AAAmBC,kBAAAA,OAAO,EAAE;AAAA,2BAAMb,OAAO,CAACc,GAAR,CAAY,YAAZ,CAAN;AAAA;AAA5B,iBADF,CAHJ,EAMI;AAAEC,kBAAAA,UAAU,EAAE;AAAd,iBANJ;AAQH;;AA7BT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAwCA,sBAAazB,KAAb,EACA;AAAA;;AACA,UAAOD,MAAP,GAAiB,KAAKD,KAAtB,CAAOC,MAAP;;AAEA,UAAGA,MAAM,IAAIA,MAAM,CAAC2B,MAAP,GAAgB,CAA7B,EACA;AACI,eAAO3B,MAAM,CAAC4B,GAAP,CAAW,UAAChB,KAAD,EAAQiB,KAAR,EAAkB;AAChC,iBACI,oBAAC,QAAD;AACA,YAAA,GAAG,EAAIA,KADP;AAEA,YAAA,KAAK,EAAIjB,KAAK,CAACQ,KAFf;AAGA,YAAA,QAAQ,EACN,oBAAC,IAAD;AAAM,cAAA,MAAM,MAAZ;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,IAAI,EAAC,cAFP;AAGE,cAAA,KAAK,EAAC,MAHR;AAIE,cAAA,OAAO,EAAE;AAAA,uBAAMU,OAAO,CAACC,OAAR,CAAgBnB,KAAK,CAACoB,OAAtB,CAAN;AAAA,eAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAWA,YAAA,SAAS,EACL,oBAAC,IAAD;AAAM,cAAA,MAAM,MAAZ;AACA,cAAA,IAAI,EAAC,OADL;AAEA,cAAA,IAAI,EAAC,cAFL;AAGA,cAAA,KAAK,EAAC,MAHN;AAIA,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACC,iBAAL,CAAuBhC,KAAvB,EAA6BW,KAA7B,CAAN;AAAA,eAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuBH,SAxBM,CAAP;AA0BH;AAGA;;;WACD,kBACA;AAAA;;AACI,UAAMX,KAAK,GAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B,EAAuC,EAAvC,CAAd;AACA,UAAMiB,MAAM,GAAG,KAAKnB,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,QAA/B,EAAwC,EAAxC,CAAf;;AAGA,UAAGH,KAAK,CAACK,EAAT,EACA;AACA,eACI,oBAAC,UAAD;AAAY,UAAA,KAAK,EAAE4B,MAAM,CAACC,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,IAAD;AAAM,UAAA,MAAM,EAAEF,MAAM,CAACG,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,MAA7B;AAA8B,UAAA,MAAM,EAAE;AAACC,YAAAA,GAAG,EAACrC,KAAK,CAACsC;AAAX,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADA,EAIA,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,EAAE,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWvC,KAAK,CAACmB,KAAjB,MADJ,EAEI,oBAAC,IAAD;AAAM,UAAA,EAAE,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWC,MAAX,MAFJ,EAIA,oBAAC,IAAD;AACA,UAAA,MAAM,MADN;AAEA,UAAA,IAAI,EAAC,MAFL;AAGA,UAAA,IAAI,EAAC,cAHL;AAIA,UAAA,KAAK,EAAC,MAJN;AAKA,UAAA,IAAI,EAAE,EALN;AAMA,UAAA,OAAO,EAAE;AAAA,mBAAMS,OAAO,CAACC,OAAR,CAAgB,MAAI,CAAChC,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBgC,OAArC,CAAN;AAAA,WANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJA,CAJA,CADJ,EAkBY,oBAAC,OAAD;AAAS,UAAA,KAAK,EAAE;AAACS,YAAAA,eAAe,EAAE;AAAlB,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAlBZ,EAmBY,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKC,YAAL,CAAkBzC,KAAlB,CADL,CAnBZ,CADJ;AAwBG,OA1BH,MA2BI;AACA,4BAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAN;AACH;AACJ;;;;EA1I8CX,KAAK,CAACqD,S;;AAAhC7C,iB,CACZ8C,iB,GAAoB;AACzBxB,EAAAA,KAAK,EAAE;AADkB,C;SADRtB,iB;AA6IrB,IAAMoC,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC7BX,EAAAA,SAAS,EAAE;AACTY,IAAAA,IAAI,EAAE;AADG,GADkB;AAI7BX,EAAAA,MAAM,EAAE;AACNW,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,QAFV;AAGNC,IAAAA,aAAa,EAAE,KAHT;AAINR,IAAAA,eAAe,EAAE,SAJX;AAKNS,IAAAA,OAAO,EAAE;AALH,GAJqB;AAW5Bb,EAAAA,MAAM,EAAE;AACPU,IAAAA,IAAI,EAAE,CADC;AAEPI,IAAAA,WAAW,EAAE;AAFN,GAXoB;AAe7BX,EAAAA,WAAW,EAAE;AACXO,IAAAA,IAAI,EAAE,CADK;AAEXK,IAAAA,QAAQ,EAAE,MAFC;AAGXJ,IAAAA,cAAc,EAAE,UAHL;AAIXC,IAAAA,aAAa,EAAE;AAJJ,GAfgB;AAqB7BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,MADJ;AAERC,IAAAA,KAAK,EAAE,SAFC;AAGRC,IAAAA,QAAQ,EAAE;AAHF,GArBmB;AA0B7BC,EAAAA,OAAO,EAAE;AACPF,IAAAA,KAAK,EAAE,SADA;AAEPC,IAAAA,QAAQ,EAAE;AAFH;AA1BoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, View, Linking, Alert, FlatList, SectionList } from 'react-native';\nimport {Avatar, Text, Icon, Divider, List, ListItem } from 'react-native-elements';\n\nimport * as actions from '../actions';\n\nexport default class AlbumDetailScreen extends React.Component {\n  static navigationOptions = {\n    title: 'AlbumDetail',\n  };\n\n  constructor()\n  {\n      super();\n\n      this.state = {\n          tracks:[],\n          //isPlaying: false,\n      //currentSongIndex: undefined\n      }\n    \n      //this.currentSong = undefined;\n  }\n\n  componentDidMount()\n  {\n    const album = this.props.navigation.getParam('album',{});\n    actions.getAlbumTracks(album.id).then(\n        tracks => this.setState({tracks})\n    ).catch(error => console.error(error))\n  \n}\nasync saveFavoriteTrack (album, track)\n{\n    const favoriteAlbum = await actions.retrieveData('favoriteAlbum') || {};\n\n    let albumData = favoriteAlbum[album.id];\n\n    if(!albumData)\n    {\n        albumData = album;\n    }\n    if(!albumData['tracks'])\n    {\n        albumData['tracks'] = {};\n    }\n        albumData['tracks'][track.id] = track;\n        favoriteAlbum[album.id] = albumData;\n\n        const success = actions.storeData('favoriteAlbum',favoriteAlbum);\n\n        if(success)\n        {\n            Alert.alert(\n                'Track Added!',\n                `Track ${track.title} from ${track.artist.name} was added to Favorites!`,\n                [\n                  {text: 'Continue', onPress: () => console.log('OK Pressed')},\n                ],\n                { cancelable: false }\n              )\n        }\n    }\n\n    // async playSong(track, index) {\n    //     if ( this.currentSong &&  this.state.isPlaying ) { this.currentSong.stopAsync()  }\n    \n    //     try {\n    //       const { sound: soundObject, status } = await Expo.Audio.Sound.create(\n    //          {uri: track.preview},\n    //          { shouldPlay: true }\n  \nrenderTracks(album)\n{\nconst {tracks} = this.state;\n\nif(tracks && tracks.length > 0)\n{\n    return tracks.map((track, index) => {\n        return (\n            <ListItem\n            key = {index}\n            title = {track.title}\n            leftIcon={\n              <Icon raised\n                name='play'\n                type='font-awesome'\n                color='#f50'\n                onPress={() => Linking.openURL(track.preview)}/>\n                }\n            \n            rightIcon={\n                <Icon raised\n                name='heart'\n                type='font-awesome'\n                color='#f50'\n                onPress={() => this.saveFavoriteTrack(album,track)}/>\n            }\n\n            />\n        )\n\n    })\n    \n}\n\n\n}\nrender()\n{\n    const album = this.props.navigation.getParam('album',{});\n    const artist = this.props.navigation.getParam('artist','');\n\n   // const {tracks, isPlaying} = this.state;\n    if(album.id)\n    {\n    return(\n        <ScrollView style={styles.container}>\n            <View style={styles.header}>\n            <View styles={styles.avatar}>\n            <Avatar size=\"xlarge\" rounded source={{uri:album.cover_medium}}></Avatar>\n            </View>\n            <View style={styles.headerRight}>\n                <Text h4> {album.title} </Text>\n                <Text h4> {artist} </Text>\n                    \n            <Icon\n            raised\n            name='play'\n            type='font-awesome'\n            color='#f50'\n            size={30}\n            onPress={() => Linking.openURL(this.state.tracks[0].preview)} />\n                  </View>\n                    </View>\n                    <Divider style={{backgroundColor: 'black'}}/>\n                    <View>\n                        {this.renderTracks(album)}\n                    </View>\n            </ScrollView>\n    );}\n    else{\n        <View><Text>Loading...</Text></View>\n    }\n}\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    header: {\n      flex: 1,\n      justifyContent: 'center',\n      flexDirection: 'row',\n      backgroundColor: '#91dfe5',\n      padding: 20\n    },\n     avatar: {\n      flex: 1,\n      marginRight: 10\n    },\n    headerRight: {\n      flex: 1,\n      flexWrap: 'wrap',\n      justifyContent: 'flex-end',\n      flexDirection: 'column'\n    },\n    mainText: {\n      fontWeight: 'bold',\n      color: '#3a3a3a',\n      fontSize: 17\n    },\n    subText: {\n      color: '#3a3a3a',\n      fontSize: 17\n    }\n  });"]},"metadata":{},"sourceType":"module"}