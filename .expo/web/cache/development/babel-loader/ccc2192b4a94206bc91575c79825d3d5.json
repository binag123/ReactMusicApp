{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MusicPlayer\\\\screens\\\\StorageScreen.js\";\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Divider, Text } from 'react-native-elements';\nimport * as actions from \"../actions\";\n\nvar StorageScreen = function (_React$Component) {\n  _inherits(StorageScreen, _React$Component);\n\n  function StorageScreen() {\n    var _this;\n\n    _classCallCheck(this, StorageScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StorageScreen).call(this));\n    _this.state = {\n      value: ''\n    };\n    return _this;\n  }\n\n  _createClass(StorageScreen, [{\n    key: \"storeData\",\n    value: function storeData() {\n      var data, value;\n      return _regeneratorRuntime.async(function storeData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                value: 'Some Testing Data!'\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(actions.storeData('someKey', data));\n\n            case 3:\n              value = _context.sent;\n\n              if (value) {}\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"retrieveData\",\n    value: function retrieveData() {\n      var data;\n      return _regeneratorRuntime.async(function retrieveData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setState({\n                value: ''\n              });\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(actions.retrieveData('favoriteAlbum'));\n\n            case 3:\n              data = _context2.sent;\n\n              if (data) {\n                console.log(data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"removeData\",\n    value: function removeData() {\n      var success;\n      return _regeneratorRuntime.async(function removeData$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(actions.clearStorage());\n\n            case 2:\n              success = _context3.sent;\n\n              if (success) {\n                this.setState({\n                  value: ''\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var value = this.state.value;\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        }\n      }, \" Saved Songs \"), React.createElement(Button, {\n        title: \"store data!\",\n        onPress: function onPress() {\n          _this2.storeData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        }\n      }), React.createElement(Button, {\n        title: \"retreive  data!\",\n        onPress: function onPress() {\n          _this2.retrieveData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        }\n      }), React.createElement(Button, {\n        title: \"remove data!\",\n        onPress: function onPress() {\n          _this2.removeData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        }\n      }), React.createElement(Text, {\n        h4: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      }, \" \", value, \" \"), React.createElement(Divider, {\n        style: {\n          backgroundColor: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        }\n      }), React.createElement(Text, {\n        h3: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        }\n      }, \" Touchables \"), React.createElement(TouchableHighlight, {\n        onPress: function onPress() {},\n        underlayColor: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        }\n      }, React.createElement(View, {\n        style: styles.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        }\n      }, \"TouchableHighlight\"))), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        }\n      }, React.createElement(View, {\n        style: styles.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        }\n      }, \"TouchableOpacity\"))));\n    }\n  }]);\n\n  return StorageScreen;\n}(React.Component);\n\nStorageScreen.navigationOptions = {\n  title: 'Storage'\n};\nexport { StorageScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#fff'\n  },\n  button: {\n    marginBottom: 30,\n    width: 260,\n    alignItems: 'center',\n    backgroundColor: '#2196F3'\n  },\n  buttonText: {\n    padding: 20,\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/MusicPlayer/screens/StorageScreen.js"],"names":["React","Button","Divider","Text","actions","StorageScreen","state","value","data","storeData","setState","retrieveData","console","log","clearStorage","success","styles","container","removeData","backgroundColor","button","buttonText","Component","navigationOptions","title","StyleSheet","create","flex","paddingTop","marginBottom","width","alignItems","padding","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, TouchableHighlight, TouchableOpacity, View } from 'react-native';\nimport { Button, Divider, Text } from 'react-native-elements';\n\nimport * as actions from '../actions';\n\nexport default class StorageScreen extends React.Component {\n    static navigationOptions = {\n      title: 'Storage',\n    };\n  \n    constructor() {\n      super();\n  \n      this.state = {\n        value: ''\n      }\n    }\n  \n    async storeData() {\n      const data = {\n        value: 'Some Testing Data!'\n      }\n  \n      const value = await actions.storeData('someKey', data);\n  \n      if (value) {\n          //console.log(value);\n      }\n    }\n  \n    async retrieveData() {\n      this.setState({\n        value: ''\n      });\n  \n      const data = await actions.retrieveData('favoriteAlbum');\n  \n      if (data) {\n        console.log(data);\n       //  this.setState({\n         //value: data.value\n     //})\n      }\n    }\n  \n    async removeData() {\n     const success = await actions.clearStorage();\n  \n     if (success) {\n      this.setState({value: ''})\n     }\n    }\n  \n    render() {\n      const {value} = this.state;\n  \n      return (\n        <ScrollView style={styles.container}>\n          <Text> Saved Songs </Text>\n  \n          <Button title='store data!' onPress={ () => { this.storeData()}} />\n          <Button title='retreive  data!' onPress={ () => { this.retrieveData()}} />\n          <Button title='remove data!' onPress={ () => { this.removeData()}} />\n  \n          <Text h4> {value} </Text>\n  \n          <Divider style={{backgroundColor: 'black'}}/>\n          <Text h3> Touchables </Text>\n  \n          <TouchableHighlight onPress={() => {}} underlayColor=\"white\">\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>TouchableHighlight</Text>\n            </View>\n          </TouchableHighlight>\n          <TouchableOpacity onPress={() => {}}>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>TouchableOpacity</Text>\n            </View>\n          </TouchableOpacity>\n        </ScrollView>\n      );\n    }\n  }\n  \n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      paddingTop: 15,\n      backgroundColor: '#fff',\n    },\n    button: {\n      marginBottom: 30,\n      width: 260,\n      alignItems: 'center',\n      backgroundColor: '#2196F3'\n    },\n    buttonText: {\n      padding: 20,\n      color: 'white'\n    }\n  });"]},"metadata":{},"sourceType":"module"}