{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MusicPlayer\\\\screens\\\\FavoriteScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { Card, Button, Text, List, ListItem, Icon } from 'react-native-elements';\nimport * as actions from \"../actions\";\nimport _ from 'lodash';\n\nvar FavoriteScreen = function (_React$Component) {\n  _inherits(FavoriteScreen, _React$Component);\n\n  var _super = _createSuper(FavoriteScreen);\n\n  function FavoriteScreen() {\n    var _this;\n\n    _classCallCheck(this, FavoriteScreen);\n\n    _this = _super.call(this);\n    _this.state = {\n      favoriteAlbum: undefined\n    };\n\n    _this.getFavoriteAlbums();\n\n    return _this;\n  }\n\n  _createClass(FavoriteScreen, [{\n    key: \"getFavoriteAlbums\",\n    value: function getFavoriteAlbums() {\n      var favoriteAlbum;\n      return _regeneratorRuntime.async(function getFavoriteAlbums$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(actions.retrieveData('favoriteAlbum'));\n\n            case 2:\n              favoriteAlbum = _context.sent;\n\n              if (favoriteAlbum) {\n                this.setState({\n                  favoriteAlbum: favoriteAlbum\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"deleteAlbum\",\n    value: function deleteAlbum(albumId) {\n      var favoriteAlbum, success;\n      return _regeneratorRuntime.async(function deleteAlbum$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              favoriteAlbum = this.state.favoriteAlbum;\n              delete favoriteAlbum[albumId];\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(actions.storeData('favoriteAlbum', favoriteAlbum));\n\n            case 4:\n              success = _context2.sent;\n\n              if (success) {\n                this.setState({\n                  favoriteAlbum: favoriteAlbum\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderFavoriteTracks\",\n    value: function renderFavoriteTracks(tracks) {\n      if (tracks) {\n        return _.map(tracks, function (track, id) {\n          return React.createElement(ListItem, {\n            key: id,\n            title: track.title,\n            leftIcon: {\n              name: 'play-arrow'\n            },\n            rightIcon: React.createElement(Icon, {\n              raised: true,\n              name: \"music\",\n              type: \"font-awesome\",\n              color: \"#f50\",\n              onPress: function onPress() {\n                return Linking.openURL(track.preview);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 15\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 11\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"renderFavoriteAlbums\",\n    value: function renderFavoriteAlbums() {\n      var _this2 = this;\n\n      var favoriteAlbum = this.state.favoriteAlbum;\n\n      if (favoriteAlbum) {\n        return _.map(favoriteAlbum, function (album, id) {\n          return React.createElement(View, {\n            key: id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 11\n            }\n          }, React.createElement(Card, {\n            title: album.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }\n          }, React.createElement(Button, {\n            title: \"Delete Album\",\n            raised: true,\n            backgroundColor: \"#f50\",\n            name: \"trash\",\n            onPress: function onPress() {\n              return _this2.deleteAlbum(album.id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }\n          }), _this2.renderFavoriteTracks(album.tracks)));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        containerStyle: styles.listContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, this.renderFavoriteAlbums()));\n    }\n  }]);\n\n  return FavoriteScreen;\n}(React.Component);\n\nFavoriteScreen.navigationOptions = {\n  title: 'Favorite'\n};\nexport { FavoriteScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#91dfe5'\n  },\n  listContainer: {\n    backgroundColor: '#eaeaea'\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/MusicPlayer/screens/FavoriteScreen.js"],"names":["React","Card","Button","Text","List","ListItem","Icon","actions","_","FavoriteScreen","state","favoriteAlbum","undefined","getFavoriteAlbums","retrieveData","setState","albumId","storeData","success","tracks","map","track","id","title","name","Linking","openURL","preview","album","deleteAlbum","renderFavoriteTracks","styles","container","listContainer","renderFavoriteAlbums","Component","navigationOptions","StyleSheet","create","flex","paddingTop","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, View, Linking } from 'react-native';\nimport { Card, Button, Text, List, ListItem, Icon } from 'react-native-elements';\n\nimport * as actions from '../actions';\nimport _ from 'lodash';\n\nexport default class FavoriteScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Favorite',\n  };\n\n  constructor() {\n    super();\n\n    this.state = {\n      favoriteAlbum: undefined\n    }\n\n    this.getFavoriteAlbums();\n  }\n\n  async getFavoriteAlbums() {\n    const favoriteAlbum = await actions.retrieveData('favoriteAlbum');\n\n    if (favoriteAlbum) {\n      this.setState({favoriteAlbum});\n    }\n  }\n\n  async deleteAlbum(albumId) {\n    const { favoriteAlbum } = this.state;\n\n    delete favoriteAlbum[albumId];\n\n    const success = await actions.storeData('favoriteAlbum', favoriteAlbum);\n\n    if (success) {\n      this.setState({favoriteAlbum});\n    }\n  }\n\n  renderFavoriteTracks(tracks) {\n    if (tracks) {\n      return _.map(tracks, (track, id) => {\n        return (\n          <ListItem\n            key={id}\n            title={track.title}\n            leftIcon={{name: 'play-arrow'}}\n            rightIcon={\n              <Icon\n                raised\n                name='music'\n                type='font-awesome'\n                color='#f50'\n                onPress={() => Linking.openURL(track.preview)}/>\n            } />\n        )\n      })\n    }\n  }\n\n  renderFavoriteAlbums() {\n    const { favoriteAlbum } = this.state;\n\n    if (favoriteAlbum) {\n      return _.map(favoriteAlbum, (album, id) => {\n        return (\n          <View key={id}>\n            <Card\n              title={album.title}>\n                <Button\n                  title='Delete Album'\n                  raised\n                  backgroundColor='#f50'\n                  name='trash'\n                  onPress={() => this.deleteAlbum(album.id)}\n              />\n              { this.renderFavoriteTracks(album.tracks)}\n\n            </Card>\n          </View>\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <ScrollView style={styles.container}>\n        <View containerStyle={styles.listContainer}>\n          {this.renderFavoriteAlbums()}\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#91dfe5',\n  },\n  listContainer: {\n    backgroundColor: '#eaeaea'\n  }\n\n});"]},"metadata":{},"sourceType":"module"}