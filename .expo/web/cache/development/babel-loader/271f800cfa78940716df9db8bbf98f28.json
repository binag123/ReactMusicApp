{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MusicPlayer\\\\screens\\\\StorageScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Divider, Text } from 'react-native-elements';\nimport * as actions from \"../actions\";\n\nvar StorageScreen = function (_React$Component) {\n  _inherits(StorageScreen, _React$Component);\n\n  var _super = _createSuper(StorageScreen);\n\n  function StorageScreen() {\n    var _this;\n\n    _classCallCheck(this, StorageScreen);\n\n    _this = _super.call(this);\n    _this.state = {\n      value: ''\n    };\n    return _this;\n  }\n\n  _createClass(StorageScreen, [{\n    key: \"storeData\",\n    value: function storeData() {\n      var data, value;\n      return _regeneratorRuntime.async(function storeData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                value: 'Some Testing Data!'\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(actions.storeData('someKey', data));\n\n            case 3:\n              value = _context.sent;\n\n              if (value) {}\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"retrieveData\",\n    value: function retrieveData() {\n      var data;\n      return _regeneratorRuntime.async(function retrieveData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setState({\n                value: ''\n              });\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(actions.retrieveData('favoriteAlbum'));\n\n            case 3:\n              data = _context2.sent;\n\n              if (data) {\n                console.log(data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"removeData\",\n    value: function removeData() {\n      var success;\n      return _regeneratorRuntime.async(function removeData$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(actions.clearStorage());\n\n            case 2:\n              success = _context3.sent;\n\n              if (success) {\n                this.setState({\n                  value: ''\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var value = this.state.value;\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, \" Saved Songs \"), React.createElement(Button, {\n        title: \"store data!\",\n        onPress: function onPress() {\n          _this2.storeData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"retreive  data!\",\n        onPress: function onPress() {\n          _this2.retrieveData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"remove data!\",\n        onPress: function onPress() {\n          _this2.removeData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return StorageScreen;\n}(React.Component);\n\nStorageScreen.navigationOptions = {\n  title: 'Storage'\n};\nexport { StorageScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#2196F3'\n  },\n  button: {\n    marginBottom: 30,\n    width: 260,\n    alignItems: 'center',\n    backgroundColor: '#2196F3'\n  },\n  buttonText: {\n    padding: 20,\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/MusicPlayer/screens/StorageScreen.js"],"names":["React","Button","Divider","Text","actions","StorageScreen","state","value","data","storeData","setState","retrieveData","console","log","clearStorage","success","styles","container","removeData","Component","navigationOptions","title","StyleSheet","create","flex","paddingTop","backgroundColor","button","marginBottom","width","alignItems","buttonText","padding","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, TouchableHighlight, TouchableOpacity, View } from 'react-native';\nimport { Button, Divider, Text } from 'react-native-elements';\n\nimport * as actions from '../actions';\n\nexport default class StorageScreen extends React.Component {\n    static navigationOptions = {\n      title: 'Storage',\n    };\n  \n    constructor() {\n      super();\n  \n      this.state = {\n        value: ''\n      }\n    }\n  \n    async storeData() {\n      const data = {\n        value: 'Some Testing Data!'\n      }\n  \n      const value = await actions.storeData('someKey', data);\n  \n      if (value) {\n          //console.log(value);\n      }\n    }\n  \n    async retrieveData() {\n      this.setState({\n        value: ''\n      });\n  \n      const data = await actions.retrieveData('favoriteAlbum');\n  \n      if (data) {\n        console.log(data);\n       //  this.setState({\n         //value: data.value\n     //})\n      }\n    }\n  \n    async removeData() {\n     const success = await actions.clearStorage();\n  \n     if (success) {\n      this.setState({value: ''})\n     }\n    }\n  \n    render() {\n      const {value} = this.state;\n  \n      return (\n        <ScrollView style={styles.container}>\n          <Text> Saved Songs </Text>\n  \n          <Button title='store data!' onPress={ () => { this.storeData()}} />\n          <Button title='retreive  data!' onPress={ () => { this.retrieveData()}} />\n          <Button title='remove data!' onPress={ () => { this.removeData()}} />\n  \n          \n        </ScrollView>\n      );\n    }\n  }\n  \n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      paddingTop: 15,\n      backgroundColor: '#2196F3',\n    },\n    button: {\n      marginBottom: 30,\n      width: 260,\n      alignItems: 'center',\n      backgroundColor: '#2196F3'\n    },\n    buttonText: {\n      padding: 20,\n      color: 'white'\n    }\n  });"]},"metadata":{},"sourceType":"module"}