{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\MusicPlayer\\\\screens\\\\AlbumScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Card, Text, Button, Icon } from 'react-native-elements';\nimport { CardList } from \"../components/CardList\";\nimport { SearchList } from \"../components/SearchList\";\nimport * as actions from \"../actions\";\n\nvar AlbumScreen = function (_React$Component) {\n  _inherits(AlbumScreen, _React$Component);\n\n  var _super = _createSuper(AlbumScreen);\n\n  function AlbumScreen() {\n    var _this;\n\n    _classCallCheck(this, AlbumScreen);\n\n    _this = _super.call(this);\n    _this.state = {\n      album: [],\n      isFetching: false,\n      artist: ''\n    };\n    _this.searchTracks = _this.searchTracks.bind(_assertThisInitialized(_this));\n    _this.renderBottomNavigation = _this.renderBottomNavigation.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AlbumScreen, [{\n    key: \"searchTracks\",\n    value: function searchTracks(artist) {\n      var _this2 = this;\n\n      this.setState({\n        isFetching: true,\n        album: [],\n        artist: artist\n      });\n      actions.searchTracks(artist).then(function (album) {\n        return _this2.setState({\n          album: album,\n          isFetching: false\n        });\n      }).catch(function (err) {\n        return _this2.setState({\n          albums: [],\n          isFetching: false\n        });\n      });\n    }\n  }, {\n    key: \"saveAlbumToFavorite\",\n    value: function saveAlbumToFavorite(album) {\n      var favoriteAlbum, success;\n      return _regeneratorRuntime.async(function saveAlbumToFavorite$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(actions.retrieveData('favoriteAlbum'));\n\n            case 2:\n              _context.t0 = _context.sent;\n\n              if (_context.t0) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t0 = {};\n\n            case 5:\n              favoriteAlbum = _context.t0;\n\n              if (!favoriteAlbum[album.id]) {\n                _context.next = 9;\n                break;\n              }\n\n              Alert.alert('Cannot Add Album!', \"Album Already Added to Favorites!\", [{\n                text: 'Continue',\n                onPress: function onPress() {\n                  return console.log('OK Pressed');\n                }\n              }], {\n                cancelable: false\n              });\n              return _context.abrupt(\"return\", false);\n\n            case 9:\n              favoriteAlbum[album.id] = album;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(actions.storeData('favoriteAlbum', favoriteAlbum));\n\n            case 12:\n              success = _context.sent;\n\n              if (success) {\n                Alert.alert('Album Added!', \"Album \" + album.title + \" from \" + this.state.artist + \" was added to Favorites!\", [{\n                  text: 'Continue',\n                  onPress: function onPress() {\n                    return console.log('OK Pressed');\n                  }\n                }], {\n                  cancelable: false\n                });\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderBottomNavigation\",\n    value: function renderBottomNavigation(album) {\n      var _this3 = this;\n\n      var artist = this.state.artist;\n      return React.createElement(View, {\n        style: styles.albumMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 3\n        }\n      }, React.createElement(Icon, {\n        onPress: function onPress() {\n          _this3.props.navigation.navigate('AlbumDetail', {\n            album: album,\n            artist: artist\n          });\n        },\n        raised: true,\n        name: \"info\",\n        type: \"font-awesome\",\n        color: \"#f50\",\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 5\n        }\n      }), React.createElement(Icon, {\n        onPress: function onPress() {\n          return _this3.saveAlbumToFavorite(album);\n        },\n        raised: true,\n        name: \"heart\",\n        type: \"font-awesome\",\n        color: \"#f50\",\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 5\n        }\n      }));\n    }\n  }, {\n    key: \"renderAlbumView\",\n    value: function renderAlbumView() {\n      var _this$state = this.state,\n          album = _this$state.album,\n          isFetching = _this$state.isFetching;\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 1\n        }\n      }, React.createElement(SearchList, {\n        submitSearch: this.searchTracks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }), album.length > 0 && !isFetching && React.createElement(CardList, {\n        data: album,\n        imageKey: 'cover_big',\n        titleKey: 'title',\n        buttonText: \"Button\",\n        bottomView: this.renderBottomNavigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }), album.length > 0 && !isFetching && React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, \" Loading Album... \"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.renderAlbumView();\n    }\n  }]);\n\n  return AlbumScreen;\n}(React.Component);\n\nAlbumScreen.navigationOptions = {\n  title: 'Album'\n};\nexport { AlbumScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#fff'\n  },\n  albumMenu: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/MusicPlayer/screens/AlbumScreen.js"],"names":["React","Card","Text","Button","Icon","CardList","SearchList","actions","AlbumScreen","state","album","isFetching","artist","searchTracks","bind","renderBottomNavigation","setState","then","catch","err","albums","retrieveData","favoriteAlbum","id","Alert","alert","text","onPress","console","log","cancelable","storeData","success","title","styles","albumMenu","props","navigation","navigate","saveAlbumToFavorite","container","length","renderAlbumView","Component","navigationOptions","StyleSheet","create","flex","paddingTop","backgroundColor","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, View, Linking, Alert } from 'react-native';\nimport { Card, Text, Button, Icon } from 'react-native-elements';\nimport { CardList } from '../components/CardList';\nimport { SearchList } from '../components/SearchList';\n\nimport * as actions from '../actions';\n\n\nexport default class AlbumScreen extends React.Component {\n\n    static navigationOptions = {\n        title: 'Album',\n    };\n    constructor()\n    {\n        super();\n        this.state = {\n            album:[],\n            isFetching:false,\n            artist: ''\n        }\n        this.searchTracks = this.searchTracks.bind(this);\n        this.renderBottomNavigation = this.renderBottomNavigation.bind(this);\n    }\nsearchTracks(artist)\n{\n  this.setState({isFetching:true, album:[], artist})\n  actions.searchTracks(artist).then(album => this.setState({album,isFetching:false})).catch(err => this.\n    setState({albums:[],isFetching:false}));\n}\n\nasync saveAlbumToFavorite(album)\n{\nconst favoriteAlbum = await actions.retrieveData('favoriteAlbum' )|| {};\n\nif(favoriteAlbum[album.id])\n{\n  Alert.alert(\n    'Cannot Add Album!',\n    `Album Already Added to Favorites!`,\n    [\n      {text: 'Continue', onPress: () => console.log('OK Pressed')},\n    ],\n    { cancelable: false }\n  )\n  return false;\n}\nfavoriteAlbum[album.id] = album;\n\nconst success = await actions.storeData('favoriteAlbum',favoriteAlbum);\n\nif(success)\n{\n  Alert.alert(\n    'Album Added!',\n    `Album ${album.title} from ${this.state.artist} was added to Favorites!`,\n    [\n      {text: 'Continue', onPress: () => console.log('OK Pressed')},\n    ],\n    { cancelable: false }\n  )\n}\n}\nrenderBottomNavigation(album)\n{\n  const {artist} = this.state;\nreturn(\n  <View style={styles.albumMenu}>\n   \n    \n    <Icon onPress={() => { this.props.navigation.navigate('AlbumDetail', {album,artist}) }}\n    raised\n    name='info'\n    type='font-awesome'\n    color='#f50'\n    size={30}/>\n    <Icon onPress={() =>this.saveAlbumToFavorite(album)}\n    raised\n    name='heart'\n    type='font-awesome'\n    color='#f50'\n    size={30}/>\n  </View>\n)\n\n}\n\nrenderAlbumView()\n{\n  const { album, isFetching } = this.state;\n  return (\n<ScrollView style={styles.container}>\n      <SearchList submitSearch={this.searchTracks}></SearchList>\n      { album.length > 0 && !isFetching &&\n      <CardList data={ album } \n      imageKey={'cover_big'} \n      titleKey={'title'}\n      buttonText = {\"Button\"}\n      bottomView={this.renderBottomNavigation}>\n        \n      </CardList>\n      }\n      { album.length > 0 && !isFetching &&\n      <Text> Loading Album... </Text>\n      }\n\n    </ScrollView>\n  );\n}\n    \n    render(){\n        return this.renderAlbumView();\n    \n  \n}\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#fff',\n  },\n  albumMenu:{\n    flexDirection:'row',\n    justifyContent: 'space-between'\n  }\n});"]},"metadata":{},"sourceType":"module"}